##cat()やprint()の非表示
##capture.output()
##options(warn=-1)
#データの時間範囲を文字列からPOSIXct型へ
fdtP<-as.POSIXct(fdt,tz="UTC")
tdtP<-as.POSIXct(tdt,tz="UTC")
stDS<-data.frame(sDS[fdtP <= sDS$time & sDS$time <= tdtP,])
##元のデータセットと基本的には列を変えない
#集約する時間単位（秒数）に分類するキーを設定
##print(f)
tDS<-transform(stDS, sumtime=as.POSIXct((as.integer(stDS$time)%/%interval)*interval, origin="1970-01-01",tz="UTC"))
##tDS<-transform(sDS, sumtime=as.POSIXct((as.integer(sDS$time)%/%interval)*interval, origin="1970-01-01",tz="UTC"))
f<-rep(c(f),length=7)
##agent毎、時間単位毎に分類可能にして、aent毎＆時間単位毎に集計する
DSgb<-group_by(tDS, NodeNo, sumtime)
sumDS<-suppressMessages(summarise(DSgb, temperature=f[[1]](temperature), humidity=f[[2]](humidity), pressure=f[[3]](pressure), luminance=f[[4]](luminance), presence=f[[5]](presence), motion=f[[6]](motion), noise=f[[7]](noise)))
names(sumDS)[[2]] <- "time"
sumDS
}
MeXds.360mean <- mexSum.org(interval=60*60, f=mean)
View(MeXds.360mean)
View(MeXds.360mean)
assign("tmp2", 10)
doPredefine <- function {
intervals <- c(60*60,60*60*24)
functions <- c(mean, mαx ,min ,sum)
for (i in intervals){
for (f in functions){
ds <- mexSum.org(interval=i, f=f)
assign(paste("MeXds.",i,as.character(eval(substitute(alist(f)))),sep=""),mexSum.org(interval=i, f=f))
write_rds(ds, file=paste("MeXds.",i,as.character(eval(substitute(alist(f)))),".rds",sep=""))
}
}
}
doPredefine <- function() {
intervals <- c(60*60,60*60*24)
functions <- c(mean, mαx ,min ,sum)
for (i in intervals){
for (f in functions){
ds <- mexSum.org(interval=i, f=f)
assign(paste("MeXds.",i,as.character(eval(substitute(alist(f)))),sep=""),mexSum.org(interval=i, f=f))
write_rds(ds, file=paste("MeXds.",i,as.character(eval(substitute(alist(f)))),".rds",sep=""))
}
}
}
doPredefine()
doPredefine <- function() {
intervals <- c(60*60,60*60*24)
functions <- c(mean, max, min ,sum)
for (i in intervals){
for (f in functions){
ds <- mexSum.org(interval=i, f=f)
assign(paste("MeXds.",i,as.character(eval(substitute(alist(f)))),sep=""),mexSum.org(interval=i, f=f))
write_rds(ds, file=paste("MeXds.",i,as.character(eval(substitute(alist(f)))),".rds",sep=""))
}
}
}
doPredefine()
tmpf <- function() {
intervals <- c(60*60,60*60*24)
functions <- c(mean, max, min ,sum)
for (i in intervals){
for (f in functions){
print(as.character(eval(substitute(alist(f)))),sep="")
}
}
}
tmpf()
tmpf <- function() {
intervals <- c(60*60,60*60*24)
functions <- c(mean, max, min ,sum)
for (i in intervals){
for (f in functions){
print(as.character(eval(substitute(alist(aist(f))))),sep="")
}
}
}
tmpf()
doPredefine <- function() {
intervals <- c(60*60,60*60*24)
functions <- c("mean", "max", "min" ,"sum")
for (i in intervals){
for (f in functions){
ds <- mexSum.org(interval=i, f=eval(parse(text=f)))
assign(paste("MeXds.",i,f,sep=""),mexSum.org(interval=i, f=f))
write_rds(ds, file=paste("MeXds.",i,f,".rds",sep=""))
}
}
}
doPredefine()
doPredefine <- function() {
intervals <- c(60*60,60*60*24)
functions <- c("mean", "max", "min" ,"sum")
for (i in intervals){
for (f in functions){
ds <- mexSum.org(interval=i, f=eval(parse(text=f)))
assign(paste("MeXds.",i,f,sep=""), ds, envir = .GlobalEnv)
write_rds(ds, file=paste("MeXds.",i,f,".rds",sep=""))
}
}
}
doPredefine()
View(MeXds.86400sum)
View(MeXds.360mean)
mexSum <- function(interval=60, sDS=MeXds, fdt="2021-07-03 08:00:00", tdt="2021-09-30 18:00:00", f=mean){
##warningの非表示
##suppressWarnings()
##メッセージの非表示
##suppressMessages()
##cat()やprint()の非表示
##capture.output()
##options(warn=-1)
#データの時間範囲を文字列からPOSIXct型へ
fdtP<-as.POSIXct(fdt,tz="UTC")
tdtP<-as.POSIXct(tdt,tz="UTC")
if (interval = 60){
sDS <- MeXds
} else {
sDS <- eval(parse(text=paste("MeXds.",interval,as.character(eval(substitute(alist(f)))),sep="")))
}
tDS<-sDS[fdtP <= sDS$time & sDS$time <= tdtP,]
tDS
}
##任意の2つのデータ列をプロットする。
mexPlot.tx <- function(x="time", y="presence", fdt="2021-07-03 08:00:00", tdt="2021-09-30 18:00:00", interval=60, sDS=MeXds, f=mean,  node=1:11){
##sDS<-suppressMessages(mexSum(interval=interval, sDS=sDS, f=f))
tDS<-mexSum(interval=interval, sDS=sDS, f=f, fdt=fdt, tdt=tdt)
idx <- is.element(tDS$NodeNo, node)
if (any(idx)){
plot(xval, yval, type="n", xlab=x, ylab=y)
nn <- tDS$NodeNo[idx]
text(xval[idx], yval[idx], labels=as.character(nn), col=nn)
title(paste(fdtP, tdtP, sep=" - "))
}
}
mexPlot <- function(x="time", y="presence", type="o", fdt="2021-07-03 08:00:00", tdt="2021-09-30 18:00:00", interval=60, sDS=MeXds, f=mean,  node=1:11){
tDS<-mexSum(interval=interval, sDS=sDS, f=f, fdt=fdt, tdt=tdt)
#取り出す列を変数で指定しているので、おまじない
xval<-eval(parse(text=paste("tDS",x,sep="$")))
yval<-eval(parse(text=paste("tDS",y,sep="$")))
if (length(xval) >0){
plot(xval, yval, type="n", xlab=x, ylab=y)
for (i in seq(node)){
idx <- (tDS$NodeNo==node[i])
if (any(idx)){
points(xval[idx], yval[idx], type=type, col=i, pch=i, lty=i)
}
}
title(paste(fdtP, tdtP, sep=" - "))
}
}
tmp<-mexSum()
mexSum <- function(interval=60, sDS=MeXds, fdt="2021-07-03 08:00:00", tdt="2021-09-30 18:00:00", f=mean){
##warningの非表示
##suppressWarnings()
##メッセージの非表示
##suppressMessages()
##cat()やprint()の非表示
##capture.output()
##options(warn=-1)
#データの時間範囲を文字列からPOSIXct型へ
fdtP<-as.POSIXct(fdt,tz="UTC")
tdtP<-as.POSIXct(tdt,tz="UTC")
if (interval = 60){
sDS <- MeXds
} else {
sDS <- eval(parse(text=paste("MeXds.",interval,as.character(eval(substitute(alist(f)))),sep="")))
}
tDS<-sDS[fdtP <= sDS$time & sDS$time <= tdtP,]
tDS
}
mexSum <- function(interval=60, sDS=MeXds, fdt="2021-07-03 08:00:00", tdt="2021-09-30 18:00:00", f=mean){
#データの時間範囲を文字列からPOSIXct型へ
fdtP<-as.POSIXct(fdt,tz="UTC")
tdtP<-as.POSIXct(tdt,tz="UTC")
if (interval = 60){
sDS <- MeXds
} else {
sDS <- eval(parse(text=paste("MeXds.",interval,as.character(eval(substitute(alist(f)))),sep="")))
}
tDS<-sDS[fdtP <= sDS$time & sDS$time <= tdtP,]
tDS
}
1 == 1
mexSum <- function(interval=60, sDS=MeXds, fdt="2021-07-03 08:00:00", tdt="2021-09-30 18:00:00", f=mean){
#データの時間範囲を文字列からPOSIXct型へ
fdtP<-as.POSIXct(fdt,tz="UTC")
tdtP<-as.POSIXct(tdt,tz="UTC")
if (interval == 60){
sDS <- MeXds
} else {
sDS <- eval(parse(text=paste("MeXds.",interval,as.character(eval(substitute(alist(f)))),sep="")))
}
tDS<-sDS[fdtP <= sDS$time & sDS$time <= tdtP,]
tDS
}
tmp <- mexSum()
tmp <- mexSum(interval=60, f=max)
View(tmp)
View(MeXds.86400max)
View(MeXds.86400max)
View(MeXds)
View(MeXds)
View(MeXds.86400min)
View(MeXds.86400min)
View(MeXds)
View(MeXds)
doPredefine <- function() {
intervals <- c(60,60*60,60*60*24)
functions <- c("mean", "max", "min" ,"sum")
for (i in intervals){
for (f in functions){
ds <- mexSum.org(interval=i, f=eval(parse(text=f)))
assign(paste("MeXds.",i,f,sep=""), ds, envir = .GlobalEnv)
write_rds(ds, file=paste("MeXds.",i,f,".rds",sep=""))
}
}
}
doPredefine()
View(MeXds.60max)
View(MeXds.60max)
MeXds.60 <- MeXds.60max
rm(MeXds.60max)
rm(MeXds.60mean)
rm(MeXds.60min)
rm(MeXds.60sum)
runApp()
runApp()
runApp()
runApp()
runApp()
Findings
Findings %>% formatDatte(c(1), method="toLocalTimeString")
Findings %>% formatDate(c(1), method="toLocalTimeString")
DT::datatable(Findings)%>% formatDate(c(1), method="toLocalTimeString")
DT::datatable(Findings)%>% formatDate(c(1), method="toDateTimeString")
DT::datatable(Findings)%>% formatDate(c(1), method="toDateString")
Findings
DT::datatable(Findings)
DT::datatable(Findings)%>% formatDate(c(1), method="toString")
DT::datatable(Findings)%>% formatDate(c(1), method="toLocaleString")
runApp()
View(MeXds.3600max)
View(MeXds.3600max)
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toLocaleString")
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toString")
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toLocalTimeString")
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toLocaleString", list(timeZone="UTC"))
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toLocaleString". list(timeZone="JST"))
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toLocaleString". list(timeZone="system"))
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toLocaleString". list(timeZone="Asia/Tokyo"))
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toLocaleString",list(timeZone="JST"))
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toLocaleString", list(timeZone="UTC"))
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toLocaleString", list(timeZone="Etc/GMT"))
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toString")
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toLocaleString", list(timeZone="Etc/GMT"))
DT::datatable(MeXds.3600max)
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toLocaleString", list(timeZone="UTC"))
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toString")
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toString", list(timeZone="UTC"))
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toISOString")
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toTimeString")
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toISOString")
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toLocaleString")
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toDateString")
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toLocaleString")
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toLocaleString",prams=list("se", list(timeZone="UTC"))
)
DT::datatable(MeXds.3600max)%>% formatDate(c(2), method="toLocaleString",params=list("se", list(timeZone="UTC"))
)
View(Findings)
DT::datatable(Findings)
DT::datatable(Findings)%>% formatDate(c(1), method="toLocaleString",params=list("se", list(timeZone="UTC"))
)
DT::datatable(Findings)%>% formatDate(c(1), method="toLocaleString",params=list("se", list(timeZone="JST")))
DT::datatable(Findings)%>% formatDate(c(1), method="toLocaleString",params=list("se", list(timeZone="Asia/Tokyo")))
Sys.time(timeZone="UTC")
Sys.timezone()
shiny::runApp()
runApp()
runApp()
Learn_Find <- read_rds("Learn_Find.rds")
View(Learn_Find)
Learn_Find[[1]]
runApp()
length(Findings)
if (NULL)
{print(1)}
is.null(NULL)
is.null(list())
length(list())
runApp()
runApp()
Findings<-list()
fdParams <- list()
Learnings<-list()
Learn_Find<-NULL
ImprovementIdea<-list()
write_rds(Findings, file = "Findings.rds")
write_rds(fdParams, file = "fdParams.rds")
write_rds(Learnings, file = "Learnings.rds")
write_rds(ImprovementIdea, file = "ImprovementIdea.rds")
runApp()
runApp()
runApp()
runApp()
System.timezone()
Sys.timezone()
seq(1:5)
seq(c(1,1,1,1))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
{1+2;3+4}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
iris
attr(iris)
attributes(iris)
View(Learnings)
Learnings[[1]]
formatDate(Learnings[[1]],method="toLocaleString", params=list("se", list(timeZone="Asia/Tokyo")))
DT::datatable(Learnings) %>% formatDate(c(1), method="toLocaleString", params=list("se", list(timeZone="Asia/Tokyo")))
data.frame(DT::datatable(Learnings) %>% formatDate(c(1), method="toLocaleString", params=list("se", list(timeZone="Asia/Tokyo"))))
tmp<-DT::datatable(Learnings) %>% formatDate(c(1), method="toLocaleString", params=list("se", list(timeZone="Asia/Tokyo")))
tmp
tmp[1:2,]
attributes(tmp)
as.matrix(tmp)
tmp
tmp[,time]
tmp[,1]
data.table(Learnings) %>% formatDate(c(1), method="toLocaleString", params=list("se", list(timeZone="Asia/Tokyo")))
library(data.table)
data.table(Learnings) %>% formatDate(c(1), method="toLocaleString", params=list("se", list(timeZone="Asia/Tokyo")))
formatDate(Leatnings, "time", "%y/%m/%d %hh:%mm")
formatDate(Learnings, "time", "%y/%m/%d %hh:%mm")
View(tmp)
runApp()
runApp()
runApp()
Findings<-list()
fdParams <- list()
Learnings<-list()
Learn_Find<-NULL
ImprovementIdea<-list()
write_rds(Findings, file = "Findings.rds")
write_rds(fdParams, file = "fdParams.rds")
write_rds(Learnings, file = "Learnings.rds")
write_rds(ImprovementIdea, file = "ImprovementIdea.rds")
runApp()
runApp()
runApp()
shiny::runApp()
Findings<-list()
fdParams <- list()
Learnings<-list()
Learn_Find<-NULL
ImprovementIdea<-list()
write_rds(Findings, file = "Findings.rds")
write_rds(fdParams, file = "fdParams.rds")
write_rds(Learnings, file = "Learnings.rds")
write_rds(ImprovementIdea, file = "ImprovementIdea.rds")
runApp()
Learn_Find<-NULL
write_rds(Learn_Find, file = "Learn_Find.rds")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
tmp <- function() {
intervals <- c(60*60*24*30)
functions <- c("mean", "max", "min" ,"sum")
for (i in intervals){
for (f in functions){
ds <- mexSum.org(interval=i, f=eval(parse(text=f)))
assign(paste("MeXds.",i,f,sep=""), ds, envir = .GlobalEnv)
write_rds(ds, file=paste("MeXds.",i,f,".rds",sep=""))
}
}
}
tmp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(jienagu/noteMD)
install.packages(jienagu/noteMD)
installed.packages("jienagu/noteMD")
library(jienagu/noteMD)
rmarkdown::pandoc_convert
note_in_html <- function(input){
rmarkdown:::find_pandoc()
f1 = tempfile()
f2 = tempfile()
f1 <- tempfile()
writeLines(input, f1, useBytes = T)
## convert input to html
rmarkdown::pandoc_convert(f1, to = 'html', from = 'markdown', output = f2)
## read results
res <-readLines(f2, encoding = 'UTF-8')
paste(res, collapse = '\n')
}
note_in_html("Please using any **markdown** syntax!")
runApp()
runApp()
shiny::runApp()
hr()
h4()
h3()
runApp()
runApp()
shiny::runApp()
runApp()
Findings<- read_rds("Findings.rds")
fdParams <- read_rds("Findings.rds")
Learnings<- read_rds("Findings.rds")
Learn_Find<- read_rds("Findings.rds")
ImprovementIdea<- read_rds("Findings.rds")
Findings
Findings[-5,]
Findings <- Findings[-5,]
fdParams
View(fdParams)
View(fdParams)
View(Findings)
View(Learn_Find)
View(Learnings)
Findings<- read_rds("Findings.rds")
fdParams <- read_rds("fdParams.rds")
Learnings<- read_rds("Learnings.rds")
Learn_Find<- read_rds("Learn_Find.rds")
Findings<- read_rds("Findings_init.rds")
ImprovementIdea<- read_rds("ImprovementIdea.rds")
Findings
Findings<- read_rds("Findings.rds")
fdParams <- read_rds("fdParams.rds")
Learnings<- read_rds("Learnings.rds")
Learn_Find<- read_rds("Learn_Find.rds")
ImprovementIdea<- read_rds("ImprovementIdea.rds")
Findings
Findings<-Findings[-5,]
fdParams
fdParams[[-5]]
fdParams[[1:4]]
fdParas[-5]
fdParams[-5]
fdParams<-fdParams[-5]
Learnings
Learnigs[-2,]
Learnings[-2,]
Learnings<-Learnings[-2,]
Learn_Find
Learn_Find[1]
Learn_Find<-Learn_Find[1]
ImprovementIdea
View(ImprovementIdea)
View(ImprovementIdea)
ImprovementIdea[1]
ImprovementIdea[1,]
ImprovementIdea<-ImprovementIdea[1,]
write_rds(Findings, file = "Findings_init.rds")
write_rds(fdParams, file = "fdParams_init.rds")
write_rds(Learnings, file = "Learnings_init.rds")
write_rds(Learn_Find, file = "Learn_Find_init.rds")
write_rds(ImprovementIdea, file = "ImprovementIdea_init.rds")
Findings.back <- Findings
fdParams.back <- fdParams
Learnings.back <-Learnings
Learn_Find.back <- Learn_Find
Improvement.back <- Improvement
ImprovementIdea.back <- ImprovementIdea
View(Findings)
View(Findings)
View(fdParams)
View(fdParams)
fdParams
View(Learnings)
View(Learn_Find)
View(Learn_Find)
Learn_Find
ImprovementIdea
write_rds(Findings, file = "Findings_init.rds")
write_rds(fdParams, file = "fdParams_init.rds")
write_rds(Learnings, file = "Learnings_init.rds")
write_rds(Learn_Find, file = "Learn_Find_init.rds")
write_rds(ImprovementIdea, file = "ImprovementIdea_init.rds")
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
